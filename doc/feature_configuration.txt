
INTRODUCTION
============

The feature generator is configured in a text file that contains
definitions of the feature modules and connections between them.
For example:

module 
{
  name first_module
  type audiofile
}

module
{
  name second_module
  type sometype
  foo 10
  bar 1.0
  xyzzy 23.34 42.00e-10 1
  sources first_module
}

The above example defines a feature generator that consists of two
modules.  The first module in the specification must be a so called
base module which is able to read input file.  All modules must have
"name" and "type" specified (see below for valid types).  All non-base
modules must have also "sources", which refers to names of the modules
that the are used as input.  Source modules must have been defined
earlier.  Most modules allow only one source, but some allow multiple
sources (separated by whitespace).  The output of the last module is
used as final features.

The feature modules are defined in file FeatureModules.cc. The names
of the new modules must be also added to the configuration loader in
FeatureGenerator.cc


MODULE TYPES
============

- audiofile (BASE MODULE)
  
    Audio file reader. Segments the audio file to windows referenced
    with frames. These windows of samples are usually fed to fft
    module for short-time fourier spectrum.

    Output dimension: window_width

    Options:
    - sample_rate (int, obligatory) : samples per second
    - frame_rate (float, default 125) : frames per second
    - window_width (int, default 2*sample_rate/frame_rate): width of the
      short time spectrum window.
    - copy_borders (int, default 1) : if positive, duplicates the border
      frames when requesting frames outside the file
    - pre_emph_coef (float, default 0.97) : Pre-emphasis filter coefficient


- pre (BASE MODULE)

    Reads precomputed features from a file. Options:

    - dim (int, obligatory) : Feature dimension, must match the dimension
      of the files
    - legacy_file (int, default 0) : If nonzero, the file dimension is
      represented by a single byte, otherwise it is a 32-bit integer
    - sample_rate (int, default 16000) : Sample rate of the original waveform
      from which the features were precomputed.  Some modules may change
      their behaviour according to the declared sample rate.
    - frame_rate (int, default 125) : Frame rate of the original waveform,
      may also affect the behaviour of other modules.


- fft

    Short-time fourier power spectrum. Computes short-time fourier
    spectrum from sample data. Uses hamming windowing.

    Output dimension: (int)(source_dim/2 + 1)

    Options: 
    - magnitude (int, default 1) : If zero, uses power (squared) values
      instead of magnitude values.
    - log (int, default 0): If nonzero, a logarithm of the spectrum values
      is returned.


- mel  

    Compute Mel-like bin features.  The output dimension depends on
    the sample rate.  A few example values below, see the exact
    function in the source.

    Output dimension:
    - 16000 Hz -> 21 dimensions
    -  8000 Hz -> 15 dimensions

    Options: 
    - sources: single source

- power

    Compute a power feature: log10(sum of the input values)

    Output dimension: 1

    Options: 
    - sources: single source

- dct

    Discrete Cosine Transform.  Computes 'dim' first DCT coefficients.
    The zeroth coefficient (effectively power) is not included.

    Options: 
    - dim (int, default 12): output dimension
    - sources: single source

- delta

    Compute a "delta"-feature for each element in the input vector
    using the following function: 
    out(t) = 1/normalization * sum_{k=1..width} k * (in(t-k) - in(t+k))

    Output dimension: same as input

    Options:
    - width (int, default 2): the number of context frames used for
      one direction (uses frames t-width, ..., t, ..., t+width)
    - normalization: (float, default 2*width*(width+1)*(2*width+1)/6)
    - sources: single source

- normalization

    Normalize mean and variance.

    Output dimension: same as input

    Options:
    - mean (float vector, default 0): value to substract from values
    - scale (float vector, default 1): scale used to multiply values
    - var (float vector): another way to specify scale (scale = 1/sqrt(var))
    - sources: single source

- lin_transform

    Apply a linear transformation to the input vector (y = Ax + b).
    The input vector x is thought as a column vector, 'matrix' option
    specifies the matrix A in vector format [A(0,0) ... A(0,src_dim)
    ... A(1, 0) ... A(1, src_dim) ... ... A(dim, src_dim)] and
    'bias' option specifies the bias vector as a (transformed) column
    vector. This module is also used for MLLR-adaptation, in which
    case it must be the last module in the feature module chain.
    
    Output dimension: specified by 'dim'

    Options:
    - dim (int, default input dimension): output dimension
    - matrix (float vector, default identity): transformation matrix
    - bias (float vector, default 0): bias vector
    - sources: single source

    Run-time parameters:
    - matrix (float vector): transformation matrix
    - bias (float vector): bias vector

- merge

    Merges input vectors from multiple sources into a large super
    vector.

    Output dimension: sum of the dimensions of the sources

    Options:
    - sources: one or multiple sources

- mean_subtractor

    Subtracts a moving average from the feature vector. After MFCC this
    processing is called Cepstral Mean Subtraction (CMS).

    Output dimension: same as input

    Options:
    - left (int, default 75): span of the moving average window to the
      past
    - right (int, default 75): span of the moving average window to the
      future
    - sources: single source

- vtln

    Applies a non-linear transformation to the input, which is assumed to
    be the output of the FFT module. Used to compensate speaker specific
    vocal tract length.

    Output dimension: same as input

    Options:
    - pwlin_vtln (int, default 0): If nonzero, uses piecewise linear warping
      instead of biliner.
    - pwlin_turnpoint (float, default 0.8): If using piecewise linear warping,
      this defines the turn point of the warping in normalized frequency.
    - sinc_interpolation_rad (int, default 8): Radius of sinc interpolation
      table. If zero, uses linear interpolation instead.
    - lanczos_window (int, default 1): If positive, uses lanczos windowing
      instead of pure sinc interpolation.
    - slapt (int, default 0): If nonzero, uses SLAPT parameterization for
      the warping curve.

    Run-time parameters:
    - warp_factor (float): Warping factor for the transformation.
    - slapt (float vector): If slapt is in use, the coefficients for the
      warping curve.

- concat

    Concatenates a span of frames into a single supervector.

    Options:
    - left (int, default 0): span of frames to the past
    - right (int, default 0): span of frames to the future
